! MONOLITO MODULAR !.- En los monolitos se solía tener lo sig:
  - Controllers
  - Services/Listeners
  - Repositories (capa que se comunica con la DB)

  Llega un momento cuando se trabaja con monolitos en los que nosotros tenemos diff
  servicios por ejm para interacutuar con usuarios, productos, categorias, pedidos etc,
  e igual los controladores.
  Cuando crece esto muchas de las veces que un controlador puede llamar a varios servicios
  y se genera mucha dependencia de unos con otros, estos servcios tienen varios repos
  luego otro probelma es que hay un repo que está inyectado en más de un servicio porque
  es necesario y alfinal se terminan generando dependencias que son dificil de mantener
  más que to do de refactorizar.

  Apartir de esto la solución de esto nacen los microservicios, es decir, cada servcio
  hace una sola cosa una para productos, usuarios categorias, etc, incluso podemos
  hacer deploy de cada servicio por lo tanto es más sencillo.
  El problema de esto es que paa tener microservicios y que funcionen bien debemos tener
  bien controlado el tema de observabilidad y tratabilidad.

  Hay una nueva corriente ahora que viene como a reemplazara esto de los monolitos y no
  depender de los microservicios que es los monolitos modulares.
  La idea es tener un monolito que a su vez dentro contenga módulos, que estos módulos
  sean independientes de otros módulos

  Para optimización de DB, lo que podemos logra haciendo esto es poder tener nosotros en cada modulo una tabla
  que trabaje ara dicho modulo, y n tener FK en otras tablas de otros modulos, es decir si en el modulo A tenemos una tabla
  users está por ende está relacionada con la tabla products del modulo B, pero no tenemos que crear dicha relation en duro
  si no una relación a medias, solo colocar por ejm el id del usuario que agrego dicho producto  tener una refrencia, en cambio si
  en el modulo B tenemos nosotros products y categories, aquí si podemos crear la relación en duro osea crear una FK en la tabla
  porque pertenecen al mismo modulo.

!!! ARQUITECURA HEXAGONAL !!!.- No es más que:
    - En la carpeta de infraestructure lo relacionado con el framework (DB, Librerias de terceros, testing, Request, Controller).
    - En la carpeta de application todos los casos de uso (Crear rent, consultar, borrarlo etc igual para customers).
    - En la carpeta de domain todos nuestras entidades y nuestra lógica de negocio para trabajar con nuestras entidades (Servicios, entidades, interfaces para repos).

    Lo ideal cuando trabajamos con ARQUITECURA HEXAGONAL es que tengamos en el namespace Domain que solo hayan cosas de domain y application y viceversa, lo que no podemos tener
    nunca en un useCase de application un import de algo de symfony o import de doctrine.

    Podemos usar Hexagonal en apps medianamente pequeñas, nos sirve mucho para desacoplarnos del Framework, es directamente usar to do lo que sea del framework usar en infrastructure
    y to do lo que se application y domain que no tenga nada que ver con ningún framework eesto lo que nos va a permitir el día de mañana es que podemoas migrar de ORM, de Framework
    o cualquier otro tipo de liberia sin tocar ni application ni domain.
    Por ejm en nuestro Domain/Model aqui creamos el modelo de nuestra entidad en este ejm Customer
    si nosotros por ejm estamos creando un variable que sea products que seria un array nosotros
    no podemos tener en la carpeta Domain importaciones de doctrine o de cualquier
    librería de terceros en este ejm, esto   aplica para domain y application ejm:

    // esto esta incorrecto
    use Doctrine\Common\Collections\Collection
    private Collection products;

    public function products(): Collection

    // Correcto separando del dramwork el Domain, asi desligamos el framework o liberias
    de nuestro domain.
    private array products;
    public function products(): iterable




